{
    "cards": {
        "basic": [
            {
                "question": "What is Scope in Javascript? ",
                "answer": "In JavaScript, each function gets its own scope. Scope is basically a collection of variables as well as the rules for how those variables are accessed by name. Only code inside that function can access that function's scoped variables.A variable name has to be unique within the same scope. A scope can be nested inside another scope. If one scope is nested inside another, code inside the innermost scope can access variables from either scope."
            },
            {
                "question": "Explain equality in JavaScript",
                "answer": "Strict comparison (e.g., ===) checks for value equality without allowing coercion Abstract comparison (e.g. ==) checks for value equality with coercion var a = '42' var b = 42a == b; // true a === b; // false",
                "note": "Some simple equalityrules:If either value (aka side) in a comparison could be the true or false value, avoid == and use ===. If either value in a comparison could be of these specific values (0, or [] -- empty array), avoid == and use === In all other cases, you're safe to use ==. Not only is it safe, but in many cases it simplifies your code in a way that improves readability."
            },
            {
                "question": "Explain the typeof operator",
                "answer": "The operand can be either a literal or a data structure such as a variable, a function, or an object. for example you can check if a typeof blah is a - undefined, string, number, boolean, object. When you set a variable to null, it is also an obj "
            },
            {
                "question": "Explain arrays in JavaScript",
                "answer": "An array is an object that holds values (of any type) not particularly in named properties/keys, but rather in numerically indexed positions"
            },
            {
                "question": "What is the object type?, what are the ways to access key:value in objects?",
                "answer": "The object type refers to a compound value where you can set properties (named locations) that each hold their own values of any type. obj={key:value} "
            },
            {
                "question": "Name all the typed values- 6 total",
                "answer": "string,number,boolean, null and undefined,object,symbol (new to ES6)"
            },
            {
                "question": "What is strict mode?, what are some benefits for this?",
                "answer": "Strict Mode was a new feature in ECMAScript 5 that allows you to place a program, or a function, in a “strict” operating context. This strict context prevents certain actions from being taken and throws more exceptions. The statement “use strict”; instructs the browser to use the Strict mode, which is a reduced and safer feature set of JavaScript. Benefits: It prevents, or throws errors, when relatively “unsafe” actions are taken (such as gaining access to the global object) Strict mode makes it easier to write “secure” JavaScript."
            },
            {
                "question": "How would you check if a number is an integer?--without using isInteger()",
                "answer": "function isInt(num) {return num % 1 === 0;}"
            },
            {
                "question": "Why is it, in general, a good idea to leave the global scope of a website as-is and never touch it?",
                "answer": "Every script has access to the global scope, and if everyone uses the global namespace to define their variables, collisions will likely occur. Use the module pattern (IIFEs) to encapsulate your variables within a local namespace."
            },
            {
                "question": "Explain Null and Undefined in JavaScript",
                "answer": "JavaScript (and by extension TypeScript) has two bottom types: null and undefined. They are intended to mean different things:Something hasn't been initialized : undefined.Something is currently unavailable: null."
            },
            {
                "question": "What is JavaScript?",
                "answer": "JavaScript is a lightweight, interpreted programming language with object-oriented capabilities that allows you to build interactivity into otherwise static HTML pages. The general-purpose core of the language has been embedded in Netscape, Internet Explorer, and other web browsers."
            },
            {
                "question": "What are the features of JavaScript?",
                "answer": "It is a lightweight, interpreted programming language.It is designed for creating network-centric applications.It is complementary to and integrated with Java.It is an open and cross-platform scripting language."
            },
            {
                "question": "Given a string with symbols,letters,numbers , how do you only return letters/numbers, how do you use match()",
                "answer": "You can use a loop and search, filter() to filter out or match() which will searches a string for a match against a regular expression, and returns the matches s = s.match(/[A-Za-z0-9]/g) —return all string withing the range , a global, case-sensitive global- find every match without global - just first one (skip g) "
            },
            {
                "question": " What are the advantages of JavaScript?",
                "answer": " 1.Less server interaction − You can validate user input before sending the page off to the server. This saves server traffic, which means less load on your server. 2.Immediate feedback to the visitors − They don’t have to wait for a page reload to see if they have forgotten to enter something. 3.Increased interactivity − You can create interfaces that react when the user hovers over them with a mouse or activates them via the keyboard. 4.Richer interfaces − You can use JavaScript to include such items as drag-and-drop components and sliders to give a Rich Interface to your site visitors."
            },
            {
                "question": "What are the variable naming conventions/rules in JavaScript",
                "answer": " 1. You should not use any of the JavaScript reserved keyword as variable name. For example, break or boolean variable names are not valid. 2. JavaScript variable names should not start with a numeral (0-9). They must begin with a letter or the underscore character. For example, 123name is an invalid variable name but _123name or name123 is a valid one. 3.JavaScript variable names are case sensitive. For example, Test and test are two different variables."
            },
            {
                "question": "What is the difference between Attributes and Property?",
                "answer": "Attributes-  provide more details on an element like id, type, value etc. Property- is the value assigned to the property like type=”text”, value=’Name’ etc."
            },
            {
                "question": "What is a Typed language?",
                "answer": "Typed Language is in which the values are associated with values and not with variables. It is of two types: Dynamically: in this, the variable can hold multiple types; like in JS a variable can take number, chars. Statically: in this, the variable can hold only one type, like in Java a variable declared of string can take only set of characters and nothing else."
            },
            {
                "question": "what is a for/of loop and how do you use it?",
                "answer": "The JavaScript for/of statement loops through the values of an iterable objects for/of lets you loop over data structures that are iterable such as Arrays, Strings, Maps, NodeLists, and more"
            },
            {
                "question": "what is a for/in loop and how do you use it?",
                "answer": "The JavaScript for/in statement loops through the properties of an object: for(let prop in person) { console.log(person[prop]) } this will print all the properties of person"
            },
            {
                "question": "What will charAt() do",
                "answer": "Returns the character at the specified index (position)"
            }
        ],
        "API related": [
            {
                "question": "Explain the same-origin policy with regards to JavaScript. what restriction will your browser display?",
                "answer": "CORS-The same-origin policy prevents JavaScript from making requests across domain boundaries. An origin is defined as a combination of URI scheme, hostname, and port number. This policy prevents a malicious script on one page from obtaining access to sensitive data on another web page through that page's Document Object Model."
            },
            {
                "question": "What are the scopes of a variable in JavaScript?",
                "answer": "The scope of a variable is the region of your program in which it is defined. JavaScript variable will have only two scopes.• Global Variables − A global variable has global scope which means it is visible everywhere in your JavaScript code.• Local Variables − A local variable will be visible only within a function where it is defined. Function parameters are always local to that function."
            },
            {
                "question": "What is the purpose of ‘This’ operator in JavaScript?",
                "answer": "The JavaScript this keyword refers to the object it belongs to. This has different values depending on where it is used. In a method, this refers to the owner object and in a function, this refers to the global object."
            },
            {
                "question": "What is the difference between Local storage & Session storage?",
                "answer": "Local Storage – The data is not sent back to the server for every HTTP request (HTML, images, JavaScript, CSS, etc) – reducing the amount of traffic between client and server. It will stay until it is manually cleared through settings or program. Session Storage – It is similar to local storage; the only difference is while data stored in local storage has no expiration time, data stored in session storage gets cleared when the page session ends. Session Storage will leave when the browser is closed."
            },
            {
                "question": "What is a GET HTTP request? ",
                "answer": "GET requests are only used to request data (not modify).GET requests can be cached.GET requests remain in the browser history. GET requests can be bookmarked. GET requests should never be used when dealing with sensitive data GET requests have length restrictions"
            },
            {
                "question": "What is a POST HTTP request? ",
                "answer": "POST is used to send data to a server to create/update a resource.---POST requests are never cached. POST requests do not remain in the browser history. POST requests cannot be bookmarked. POST requests have no restrictions on data length"
            },
            {
                "question": "What is a Put HTTP request?",
                "answer": "PUT is used to send data to a server to create/update a resource"
            },
            {
                "question": "Compare GET vs POST",
                "answer": " GET is less secure compared to POST because data sent is part of the URL Never use GET when sending passwords or other sensitive information POST is a little safer than GET because the parameters are not stored in browser history or in web server logs. 2. GET has restrictions when sending data, the GET method adds the data to the URL; and the length of a URL is limited (maximum URL length is 2048 characters)meanwhile POST does not have any restrictions 3.Restriction on data type GET--Only ASCII characters allowed while POST has no restrcitions and binary data is also allowed 4. GET--Data is visible to everyone in the URL and POST-Data is not displayed in the URL "
            },
            {
                "question": "What is a 200 status code",
                "answer": "successful- This class of status codes indicates the action requested by the client was received, understood, and accepted"
            },
            {
                "question": "What is a 100 status code",
                "answer": "informational response- An informational response indicates that the request was received and understood. It is issued on a provisional basis while request processing continues. It alerts the client to wait for a final response."
            },
            {
                "question": "What is a 300 status code",
                "answer": "redirection- This class of status code indicates the client must take additional action to complete the request. Many of these status codes are used in URL redirection."
            },
            {
                "question": "What is a 400 status code",
                "answer": "client error-This class of status code is intended for situations in which the error seems to have been caused by the client. Except when responding to a HEAD request, the server should include an entity containing an explanation of the error situation, and whether it is a temporary or permanent condition. These status codes are applicable to any request method. User agents should display any included entity to the user--- commonly seen 404 not found 400 bad request 401 unauthorized"
            },
            {
                "question": "What is a 500 status code",
                "answer": "server error-The server failed to fulfill a request"
            },
            {
                "question": "",
                "answer": ""
            },
            {
                "question": "",
                "answer": ""
            },
            {
                "question": "",
                "answer": ""
            },
            {
                "question": "",
                "answer": ""
            },
            {
                "question": "",
                "answer": ""
            },
            {
                "question": "",
                "answer": ""
            },
            {
                "question": "",
                "answer": ""
            }
        ],
        "Advanced js": [
            {
                "question": " Explain what a callback function is and provide a simple example.",
                "answer": "A callback is a plain JavaScript function passed to some method as an argument or option. It is a function that is to be executed after another function has finished executing, hence the name ‘call back‘. In JavaScript, functions are objects. Because of this, functions can take functions as arguments, and can be returned by other functions.",
                "note": "function modifyArray(arr, callback) {// do something to arr here arr.push(100); callback();// then execute the callback function that was passed } "
            },
            {
                "question": " What's the difference between host objects and native objects?",
                "answer": "Native objects are objects that are part of the JavaScript language defined by the ECMAScript specification, such as String, Math, RegExp, Object, Function, etc. Host objects are provided by the runtime environment (browser or Node), such as window, XMLHTTPRequest, etc."
            },
            {
                "question": " What are some of the advantages/disadvantages of writing JavaScript code in a language that compiles to JavaScript?",
                "answer": "Some examples of languages that compile to JavaScript include CoffeeScript, Elm, ClojureScript, PureScript, and TypeScript. Advantages: Static types are awesome (in the case of TypeScript) for large projects that need to be maintained over time. Disadvantages: Require a build/compile process as browsers only run JavaScript and your code will need to be compiled into JavaScript before being served to browsers. 2. Most developers are not familiar with these languages and will need to learn it. There's a ramp up cost involved for your team if you use it for your projects. 3.These languages will always be behind the latest JavaScript standard."
            },
            {
                "question": "Explain event bubbling and how one may prevent it",
                "answer": "Event bubbling is the concept in which an event triggers at the deepest possible element, and triggers on parent elements in nesting order. As a result, when clicking on a child element one may exhibit the handler of the parent activating.One way to prevent event bubbling is using event.stopPropagation() or event.cancelBubble on IE < 9."
            },
            {
                "question": " What is Closure? Give an example.",
                "answer": "Closures are created whenever a variable that is defined outside the current scope is accessed from within some inner scope. It gives you access to an outer function’s scope from an inner function. In JavaScript, closures are created every time a function is created. To use a closure, simply define a function inside another function and expose it. "
            },
            {
                "question": "Explain Async/Await, how the code in js runs and what happens when it's not async await?",
                "answer": "By default, code executes Synchronously, meaning it just runs one line after another. A line of code cannot run until the previous line runs. Some functions are asynchronous. These functions do not wait, and will just do its thing in the background while the code can go to the next line. Since these functions do not wait, they are called nonblocking. How do we know when the function is done then?-- modern javascript introduced Async/Await.You mark a function as asynchronous by putting the word 'async' in front. In order to force an async function to 'block' (aka, wait for it to finish before running next line), use await.  --- async function blah() { //do something} await console.log('hi')  this line basically says call do something first and return something await til this is done and log 'hi' "
            },
            {
                "question": "What are Promises?",
                "answer": " a Promise is an object that once called upon, will eventually resolve or reject and return a response based on some criteria that is specified within the Promise object.promise.then(function(result) { console.log(result); // 'Stuff worked!' }, function(err) { console.log(err); // Error: 'It broke' });    ",
                "note": "- **fulfilled** - The action relating to the promise succeeded - **rejected** - The action relating to the promise failed - **pending** - Hasn't fulfilled or rejected yet - **settled** - Has fulfilled or rejected"
            },
            {
                "question": "What is promise hell?",
                "answer": "1)Promise chaining  - avoid nesting functions and refractor for clean code When you chain one promise after another "
            },
            {
                "question": "What is currying and when do we use it? can you give an example?",
                "answer": "a currying functioncurrFun takes in a function 'originalFun' and returns a function that takes in the first param of the originalFun and returns a function that takes in the second param etc."
            },
            {
                "question": "what is a spread operator",
                "answer": "takes a list, and converts it into a bunch of parameters."
            },
            {
                "question": "what is a pure function ",
                "answer": "A pure function will always return the same result whenever you call it. Pure functions cannot modify any variables outside of it."
            },
            {
                "question": "",
                "answer": ""
            },
            {
                "question": "",
                "answer": ""
            },
            {
                "question": "",
                "answer": ""
            },
            {
                "question": "",
                "answer": ""
            },
            {
                "question": "",
                "answer": ""
            },
            {
                "question": "",
                "answer": ""
            },
            {
                "question": "",
                "answer": ""
            },
            {
                "question": "",
                "answer": ""
            },
            {
                "question": "",
                "answer": ""
            }
        ],
        "Gotchas": [
            {
                "question": "Are Varibles and function names case insensitive?",
                "answer": "No. remember that native javascript function and CSS properties in javascript are camelCase"
            },
            {
                "question": "Why is it if you include a hard line break in between quotes you’ll get a parse error (unterminated string)?",
                "answer": "Line breaks are interpreted as line-ending semicolons. "
            },
            {
                "question": "Will pareInt return the integer to base 10 by default? ",
                "answer": "No. Always pass in your second argument (radix/base) which could be anything from 2-36 Example : const parsed = parseInt(x, base);"
            },
            {
                "question": "What is the rule for overwriting functions / overloading functions? what will happen when you overwrite/reassign a function",
                "answer": "When you declare a function more than once, the last declaration of that function will overwrite all previous version of that function throwing no errors or warnings."
            },
            {
                "question": "What is the rule for using For Each ?",
                "answer": "Never use for each to iterate thru an array: only use for each when needing to iterated thru object properties and methods. The enumeration will include all of the properties—including functions and prototype properties that you might not be interested in—so filter out the values you don’t want using hasOwnProperty method and typeof to exclude functions.",
                "note": "generally you’ll want to opt for for ... in for objects and use the for loop for arrays:"
            },
            {
                "question": "is Undefined ≠ null?",
                "answer": "Null is for an object, undefined is for a property, method or variable. To be null, your object has to be defined. If your object is not defined, and you test to see whether it’s null, since it’s not defined, it can’t test, and will throw an error."
            },
            {
                "question": "If we want to calculate 10-2 and divide by 2 ? What is the correct way to put in javascript and why?  ",
                "answer": "(10-2)/2 if you put 10-2/2, it will calculate mutiplication/division, put () where u need to do you addition and subtraction first--like proper math--ew"
            },
            {
                "question": "",
                "answer": ""
            },
            {
                "question": "",
                "answer": ""
            },
            {
                "question": "",
                "answer": ""
            },
            {
                "question": "",
                "answer": ""
            },
            {
                "question": "",
                "answer": ""
            },
            {
                "question": "",
                "answer": ""
            },
            {
                "question": "",
                "answer": ""
            },
            {
                "question": "",
                "answer": ""
            },
            {
                "question": "",
                "answer": ""
            },
            {
                "question": "",
                "answer": ""
            },
            {
                "question": "",
                "answer": ""
            },
            {
                "question": "",
                "answer": ""
            },
            {
                "question": "",
                "answer": ""
            }
        ],
        "React/Redux/SQL": [
            {
                "question": "what are the rules of React Hooks? Name 2",
                "answer": "1.Only call Hooks at the top level. Don’t call Hooks inside loops, conditions, or nested functions. By following this rule, you ensure that Hooks are called in the same order each time a component renders. That’s what allows React to correctly preserve the state of Hooks between multiple useState and useEffect calls. 2.Only call Hooks from React function components. Don’t call Hooks from regular JavaScript functions. (There is just one other valid place to call Hooks — your own custom Hooks. We’ll learn about them in a moment.) By following this rule, you ensure that all stateful logic in a component is clearly visible from its source code."
            },
            {
                "question": "What is React? ",
                "answer": " "
            },
            {
                "question": "We have the core principle of keeping render() a pure method. What does that mean?",
                "answer": "That means we shouldn't call setState(),query the Native UI or anything else that can mutate the existing state of the application."
            },
            {
                "question": "What is Redux?",
                "answer": "A library for react that allows you to maintain a state across your entire app. This allows you to have two different components talk to each other."
            },
            {
                "question": "What is Redux Action",
                "answer": "A way to set a state in redux. Redux does not allow you to set state directly, instead you call an action, which will trigger a reducer that will return the new state."
            },
            {
                "question": "What does dispatch in Redux do? ",
                "answer": "Calling a dispatch on an action is what makes the reducer run"
            },
            {
                "question": "Describe a lifecyle in React ",
                "answer": ""
            },
            {
                "question": "How do you use UseEffect and what should you avoid?",
                "answer": "When you call useEffect, you’re telling React to run your “effect” function after flushing changes to the DOM. Effects are declared inside the component so they have access to its props and state. By default, React runs the effects after every render — including the first render.//data fetching, subscriptions, or manually changing the DOM, if you want to only call useEffect once, pass in a [] as a second param"
            },
            {
                "question": "How do you use UseState?",
                "answer": "We call it inside a function component to add some local state to it, React will preserve this state between re-renders. useState returns a pair: the current state value and a function that lets you update. You call this function from an event handler or somewhere else. It’s similar to ` this.setState` in a class, except it doesn't merge the old and new state together. When you call setBlah, it completely ignores the previous value, and replaces with the new value"
            },
            {
                "question": "",
                "answer": ""
            },
            {
                "question": "",
                "answer": ""
            },
            {
                "question": "",
                "answer": ""
            },
            {
                "question": "",
                "answer": ""
            },
            {
                "question": "",
                "answer": ""
            },
            {
                "question": "",
                "answer": ""
            },
            {
                "question": "",
                "answer": ""
            },
            {
                "question": "",
                "answer": ""
            },
            {
                "question": "",
                "answer": ""
            },
            {
                "question": "",
                "answer": ""
            },
            {
                "question": "",
                "answer": ""
            }
        ]
    }
}